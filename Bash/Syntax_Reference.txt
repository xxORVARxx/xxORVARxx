


Bash, And Unix Shells In General, Interpret Result Codes Of Programs Like This:
  Result Of 0 Is Interpreted As True (Or "No Error"),
  And Any Other Result, Like 1, Is Interpreted As False (Or "Some Error Occurred").
  (A Bit Unusual Way For C/C++ Programmers)



Lists:

  List Of Commands, Which Is Executed In A Subshell (Variable Assignments
  In This Subshell Are Not Propagated Back):
  ( ... )
  
  List Of Commands, Which Does Not Create A Subshell:
  { ...; }

  Simple Separator Of Commands In A List, But Can Also Be Replaced By A New-line:
  ;

  Separator Of Commands Executing The Second One Only When The First Returned 0(true):
  &&

  Separator Of Commands Executing The Second One Only When The First Returned Not-0:
  ||

  Separator Of Commands, Executing Both Commands In Parallel (The First One In Background):
  &



Here Are Useful Commands As Conditions For 'if' and 'while':

  Simply A Command Which May Return 0(true) Or 1(false), (This Is A Buildin Of The Shell):
  [ ... ]

  Same As Above, Just Supports More, Like: <, >, And ( ... ) For Condition Nesting.
  It Has A Special Syntactic Construct And Can Handle Expansions Inside A Bit Differently.
  But The Whole Thing Is A Command That Returns 0(true) Or 1(false):
  [[ ... ]]

  See Details below:
  (( ... ))



C/C++ Style Integer Expressions:

  Wrapper For An Arithmetic Expression (Or Several Of Them).
    Returns The a Bool Result Of The Last Expression: 0(true) Or 1(false)
    (( ... ))
    Returns The Result Of The Last Expression:
    $(( ... ))

  -Unary:             ++, --, +, -, !, ~ (Like In C)
  -Binary Arithmetic: ** (Exponentation), *, /, %, +, -
  -Bit-Shift:         <<, >>
  -Comparison:        <=, >=, <, >, ==, != (I Think These Return Either 1(true) Or 0(false))
  -Bitwise:           &, ^, |
  -Logical:           &&, ||, And Of Course The Ternary Operator: ... ? ... : ...
  -Assignment:        =, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |=
  -Comma:             , (Simply Connects Two Expressions, Returning The Value Of The Last One)

  a=$(( b + 9 ))
  if (( i > 0 ))



Integer Comparison:

  Is Equal To:
  if [ "$a" -eq "$b" ]

  Is Not Equal To:
  if [ "$a" -ne "$b" ]

  Is Greater Than:
  if [ "$a" -gt "$b" ]

  Is Greater Than Or Equal To:
  if [ "$a" -ge "$b" ]

  Is Less Than:
  if [ "$a" -lt "$b" ]

  Is Less Than Or Equal To:
  if [ "$a" -le "$b" ]

  Is Less Than (Within Double Parentheses):
  (("$a" < "$b"))

  Is Less Than Or Equal To (Within Double Parentheses):
  (("$a" <= "$b"))
 
  Is Greater Than (Within Double Parentheses):
  (("$a" > "$b"))

  Is Greater Than Or Equal To (Within Double Parentheses):
  (("$a" >= "$b"))



String Comparison:

  Is Equal To:
  if [ "$a" = "$b" ]
  if [ "$a" == "$b" ]

  Is Not Equal To:
  if [ "$a" != "$b" ]

  Is Less Than, In ASCII Alphabetical Order:
  if [[ "$a" < "$b" ]]
  if [ "$a" \< "$b" ]

  Is Greater Than, In ASCII Alphabetical Order:
  if [[ "$a" > "$b" ]]
  if [ "$a" \> "$b" ]

  String Is Null, That Is, Has Zero Length:
  if [ -z "$String" ]

  String Is Not Null:
  if [ -n "$String" ]
  
  
  
  
||                ||                     ||                     ||           
||                || visible in terminal ||   visible in file   || existing
||        Syntax  ||  StdOut  |  StdErr  ||  StdOut  |  StdErr  ||   file   
||================++==========+==========++==========+==========++============
||          >     ||    no    |   yes    ||   yes    |    no    || overwrite
||          >>    ||    no    |   yes    ||   yes    |    no    ||  append
||                ||          |          ||          |          ||
||         2>     ||   yes    |    no    ||    no    |   yes    || overwrite
||         2>>    ||   yes    |    no    ||    no    |   yes    ||  append
||                ||          |          ||          |          ||
||         &>     ||    no    |    no    ||   yes    |   yes    || overwrite
||         &>>    ||    no    |    no    ||   yes    |   yes    ||  append
||                ||          |          ||          |          ||
||       | tee    ||   yes    |   yes    ||   yes    |    no    || overwrite
||       | tee -a ||   yes    |   yes    ||   yes    |    no    ||  append
||                ||          |          ||          |          ||
|| (*)NotExisting ||   yes    |   yes    ||    no    |   yes    || overwrite
|| (*)NotExisting ||   yes    |   yes    ||    no    |   yes    ||  append
||                ||          |          ||          |          ||
||      |& tee    ||   yes    |   yes    ||   yes    |   yes    || overwrite
||      |& tee -a ||   yes    |   yes    ||   yes    |   yes    ||  append
||                ||          |          ||          |          ||


        | Bash:              | POSIX:
        +------------------  +---------------------
        | command &> File    | command >File 2>&1
        | command &>> File   | command >>File 2>&1
        | command |& File    | command 2>&1 | File


  command > output.txt
    The standard output stream will be redirected to the file only, it will not
    be visible in the terminal. If the file already exists, it gets overwritten.

  command >> output.txt
    The standard output stream will be redirected to the file only, it will not
    be visible in the terminal. If the file already exists, the new data will 
    get appended to the end of the file.

  command 2> output.txt
    The standard error stream will be redirected to the file only, it will not be
    visible in the terminal. If the file already exists, it gets overwritten.

  command 2>> output.txt
    The standard error stream will be redirected to the file only, it will not be
    visible in the terminal. If the file already exists, the new data will get
    appended to the end of the file.

  command &> output.txt
    Both the standard output and standard error stream will be redirected to the
    file only, nothing will be visible in the terminal. If the file already
    exists, it gets overwritten.

  command &>> output.txt
    Both the standard output and standard error stream will be redirected to the
    file only, nothing will be visible in the terminal. If the file already exists,
    the new data will get appended to the end of the file..

  command | tee output.txt
    The standard output stream will be copied to the file, it will still be
    visible in the terminal. If the file already exists, it gets overwritten.

  command | tee -a output.txt
    The standard output stream will be copied to the file, it will still be
    visible in the terminal. If the file already exists, the new data will get
    appended to the end of the file.

  (*) Not Existing.
    Bash has no shorthand syntax that allows piping only StdErr to a second command,
    which would be needed here in combination with tee again to complete the table.
    If you really need something like that, please look at "How to pipe stderr, and
    not stdout?" on Stack Overflow for some ways how this can be done e.g. by
    swapping streams or using process substitution.

  command |& tee output.txt
    Both the standard output and standard error streams will be copied to the
    file while still being visible in the terminal. If the file already exists,
    it gets overwritten.

  command |& tee -a output.txt
    Both the standard output and standard error streams will be copied to the file
    while still being visible in the terminal. If the file already exists, the new
    data will get appended to the end of the file.
